name: Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: engine
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-node@v3
        with:
          node-version: '18.x'
      
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Determine version bump type
        id: bump
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'major') }} == true ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'minor') }} == true ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ ${{ contains(github.event.pull_request.labels.*.name, 'patch') }} == true ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        if: steps.bump.outputs.type != 'none'
        run: |
          BUMP_TYPE=${{ steps.bump.outputs.type }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Increment based on bump type
          if [[ "$BUMP_TYPE" == "major" ]]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [[ "$BUMP_TYPE" == "minor" ]]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          echo "Bumped version from $CURRENT_VERSION to $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update CHANGELOG.md
        if: steps.bump.outputs.type != 'none'
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          DATE=$(date +%Y-%m-%d)
          
          # Get commit messages since last tag
          COMMITS=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          
          # Prepend new version to CHANGELOG.md
          sed -i "s/# Changelog/# Changelog\n\n## $NEW_VERSION ($DATE)\n\n$COMMITS\n/" CHANGELOG.md
      
      - name: Commit and push changes
        if: steps.bump.outputs.type != 'none'
        run: |
          git add package.json CHANGELOG.md
          git commit -m "Bump version to $(node -p "require('./package.json').version")"
          git push 